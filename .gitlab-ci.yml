# image:
#   name: hashicorp/terraform
#   entrypoint: [""]
    

## variables:
##   AWS_DEFAULT_REGION: $CI_AWS_REGION
##   AWS_ACCESS_KEY_ID: $CI_AWS_ACCESS_KEY_ID
##  AWS_SECRET_ACCESS_KEY : $CI_AWS_SECRET_ACCESS_KEY

# before_script:
#   - export AWS_REGION = $CI_AWS_REGION
#   - export AWS_ACCESS_KEY_ID = $CI_AWS_ACCESS_KEY_ID
#   - export AWS_SECRET_ACCESS_KEY = $CI_AWS_SECRET_ACCESS_KEY
#   - rm -rf .terraform
#   - terraform --version
#   - terraform init

# stages:
#   - format
#   - validate
#   - plan
#   - apply
#   - destroy

# format:
#   stage: format
#   script:
#     - terraform fmt

# validate:
#   stage: validate
#   script:
#     - terraform validate
#   dependencies:
#     - format

# plan:
#   stage: plan
#   script:
#     - terraform plan -out "planfile"
#   artifacts:
#     paths:
#       - planfile
#   dependencies:
#     - validate

# apply:
#   stage: apply
#   allow_failure: true
#   script:
#     - terraform apply -auto-approve -input=false "planfile"
#   dependencies:
#     - plan
#   when: manual

# destroy: 
#   stage: destroy
#   script:
#     - terraform destroy --auto-approve 
#   # dependencies:
#   #   - apply
#   when: manual





















# # # image:
# # #   name: hashicorp/terraform:light
# # #   #name: registry.gitlab.com/gitlab-org/gitlab-build-images:terraform
# # #   entrypoint:
# # #     - '/usr/bin/env'
# # #     - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

# # # variables:
# # #   AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
# # #   AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
# # #   AWS_SECRET_ACCESS_KEY : ${AWS_SECRET_ACCESS_KEY}

# # # before_script:
# # #   - rm -rf .terraform
# # #   - terraform --version
# # #   - terraform init

# # # stages:
# # #   #- format
# # #   - validate
# # #   - plan
# # #   - apply
# # #   - destroy

# # # # format:
# # # #   stage: format
# # # #   script:
# # # #     - terraform fmt -check -diff

# # # validate:
# # #   stage: validate
# # #   script:
# # #     - terraform validate
# # #   # dependencies:
# # #   #   - format

# # # plan:
# # #   stage: plan
# # #   script:
# # #     - terraform plan -out "planfile"
# # #   artifacts:
# # #     paths:
# # #       - planfile
# # #   dependencies:
# # #     - validate

# # # apply:
# # #   stage: apply
# # #   allow_failure: true # Setting this option to true will allow the job to fail while still letting the pipeline pass.
# # #   script:
# # #     - terraform apply -input=false "planfile"
# # #   dependencies:
# # #     - plan
# # #   when: manual

# # # destroy: 
# # #   stage: destroy
# # #   script:
# # #     - terraform destroy --auto-approve 
# # #   dependencies:
# # #     - apply
# # #   when: manual
